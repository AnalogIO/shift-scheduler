package forms

import (
	"bufio"
	"bytes"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/Slug-Boi/aion-cli/config"
	"github.com/gocarina/gocsv"
)

type Form struct {
	Timestamp   string `csv:"Timestamp"`
	GroupNumber string `csv:"Group Number"`
	HashString  string `csv:"Lottery String"`
	Votes       map[string]string
}

// Generated by curl-to-Go: https://curlconverter.com/go/

//	curl -L https://docs.google.com/spreadsheets/d/YOUR_SHEET_ID/export?exportFormat=csv
//
// TODO: Add optional flag for api key currently uses config file
func GetForm(conf config.Config, local ...bool) []Form {
	var form []Form

	_, err := os.Stat("./form.csv")
	// TOOD: Possibly add a CSV data check to see if the data is corrupted
	if conf.CsvSave && !os.IsNotExist(err) {
		local = append(local, true)
	}

	// if local flag is not used then download the form
	if len(local) == 0 {
		println("Downloading form")
		url := fmt.Sprintf("https://docs.google.com/spreadsheets/d/%s/export?exportFormat=csv", conf.FormID)
		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			log.Fatal(err)
		}

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Fatal(err)
		}
		defer resp.Body.Close()

		// turn resp header into a byte array
		byteBuffer := bytes.Buffer{}
		duplicates := map[string][]byte{}
		//var duplicates map[string]string
		scanner := bufio.NewScanner(resp.Body)
		scanner.Scan() // Skip the first line
		byteBuffer.WriteString(scanner.Text() + "\n")
		for scanner.Scan() {
			line := strings.Split(scanner.Text(), ",")
			if _, ok := duplicates[line[1]]; ok {
				duplicates[line[1]] = scanner.Bytes()
			} else {
				duplicates[line[1]] = scanner.Bytes()
			}
		}

		for _, v := range duplicates {
			byteBuffer.Write(v)
			byteBuffer.WriteString("\n")
		}

		os.Remove("./form.csv")

		err = os.WriteFile("./form.csv", byteBuffer.Bytes(), 0644)
		if err != nil {
			log.Fatal(err)
		}
	}

	// Open csv file
	file, err := os.OpenFile("./form.csv", os.O_RDONLY, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	err = gocsv.UnmarshalFile(file, &form)
	if err != nil {
		log.Fatal("error in reading and unmarshaling CSV data.\nEither form ID is wrong or form data is corrupted:\n", err)
	}
	file.Seek(0, 0)

	var timeslots []string
	// Manual conversion of variable timeslots to struct
	scanner := bufio.NewScanner(file)
	if scanner.Scan() {
		// Split the header line
		header := scanner.Text()
		splitHeaders := strings.Split(header, ",")
		timeslots = append(timeslots, splitHeaders[3:]...)
	}
	inc := 0
	for scanner.Scan() {
		// Split the line
		line := scanner.Text()
		splitLine := strings.Split(line, ",")
		// Create a map to store the votes
		votes := make(map[string]string)
		for i, v := range splitLine[3:] {
			votes[timeslots[i]] = v
		}
		form[inc].Votes = votes
		inc++
	}

	return form

}
