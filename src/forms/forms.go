package forms

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
)

type Form struct {
  Participant_count int `json:"participant_count"`
  PollOptions []struct {
    Id string `json:"id"`
    Start_time int64 `json:"start_time"`
    End_time int64 `json:"end_time"`
  } `json:"poll_options"`
  PollResults []struct {
    Name string `json:"name"`
    Votes []int `json:"poll_votes"`
  } `json:"poll_participants"`

}

type config struct {
	Apikey string `json:"spAPI"`
}

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

//	curl --request GET \
//	  --url https://api.strawpoll.com/v3/polls/XmZRQjmaPgd/results \
//	  --header 'Accept: application/json' \
//	  --header 'X-API-Key: a55c3866-3ac0-11ef-9ad2-345670717338'
//
// TODO: Add optional flag for api key currently uses config file
func GetForm(pollID string) Form {
	req, err := http.NewRequest("GET", "https://api.strawpoll.com/v3/polls/XmZRQjmaPgd/results", nil)
	if err != nil {
		log.Fatal(err)
	}

	conf := GetConfigFile()

	req.Header.Set("Accept", "application/json")
	req.Header.Set("X-Api-Key", conf.Apikey)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

  // turn resp header into a byte array
  byteValue, err := io.ReadAll(resp.Body)
  if err != nil {
    log.Fatal(err)
  }

  // turn byte array into struct via json unmarshal
  var form Form
  json.Unmarshal(byteValue, &form)

  return form
}

// parson json with golang https://tutorialedge.net/golang/parsing-json-with-golang/
func GetConfigFile() config {

  // Open config file
	jsonFile, err := os.Open("../config.json")
	if err != nil {
		fmt.Println(err)
	}

	// read our opened jsonFile as a byte array.
	byteValue, err := io.ReadAll(jsonFile)
  if err != nil {
    log.Fatal(err)
  }

	// initialize config var
	var conf config

	json.Unmarshal(byteValue, &conf)

	return conf
}
